extends layout

block content
    .container
        h1=title
        
        // Welcome Section with improved styling
        .card.mb-4
            .card-body
                if isZoom
                    h3.text-center Welcome to your Zoom App! 🎉
                    p.text-center.text-muted Experience live transcript display with real-time analytics
                else
                    h3.text-center Browser Preview Mode
                    p.text-center 
                        | You're viewing your Zoom App through the browser.&nbsp;
                        a.btn.btn-primary(href=`/install`) Install in Zoom
                    .alert.alert-info
                        strong 🧪 Testing Mode: 
                        | The transcript WebSocket connection will work in both Zoom and browser for testing.
        
        // Statistics Dashboard
        .card.mb-4
            .card-header
                h3.mb-0 📊 Meeting Analytics
            .card-body
                .transcript-stats
                    .stat-item
                        .stat-value#total-transcripts 0
                        .stat-label Total Messages
                    .stat-item
                        .stat-value#active-speakers 0
                        .stat-label Active Speakers
                    .stat-item
                        .stat-value#session-duration --:--
                        .stat-label Session Time
                    .stat-item
                        .stat-value#words-per-minute 0
                        .stat-label Words/Min
                        
        // Enhanced Transcript Container
        #transcript-container.card
            .transcript-header
                h2 🎤 Live Transcripts
            #transcript-status.status-disconnected Connecting to transcript stream...
            #transcript-list.transcript-list
                p.no-transcripts No transcripts yet. Start speaking in the meeting to see live transcripts here.
        
        // Alert styling for browser mode
        .alert {
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-lg);
            border-radius: var(--border-radius-md);
            border: 1px solid transparent;
        }
        
        .alert-info {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            color: var(--info-color);
            border-color: var(--info-color);
        }

append scripts
    // Enhanced WebSocket transcript connection with analytics
    script.
        console.log('🔧 Loading enhanced WebSocket transcript connection...');
        
        // Analytics tracking variables
        let sessionStartTime = Date.now();
        let totalTranscripts = 0;
        let uniqueSpeakers = new Set();
        let totalWords = 0;
        let recentTranscripts = [];
        
        // Get meeting UUID from URL or use default for testing
        const urlParams = new URLSearchParams(window.location.search);
        const meetingUuid = urlParams.get('meetingUuid') || 'S/N3ZB7NQj+1oNKkv+t5zA==';
        
        // DOM elements
        const transcriptDisplay = document.getElementById('transcript-list');
        const statusDisplay = document.getElementById('transcript-status');
        const totalTranscriptsEl = document.getElementById('total-transcripts');
        const activeSpeakersEl = document.getElementById('active-speakers');
        const sessionDurationEl = document.getElementById('session-duration');
        const wordsPerMinuteEl = document.getElementById('words-per-minute');
        
        // Analytics update function
        function updateAnalytics() {
            const currentTime = Date.now();
            const sessionDuration = Math.floor((currentTime - sessionStartTime) / 1000);
            const minutes = Math.floor(sessionDuration / 60);
            const seconds = sessionDuration % 60;
            
            // Update UI
            totalTranscriptsEl.textContent = totalTranscripts;
            activeSpeakersEl.textContent = uniqueSpeakers.size;
            sessionDurationEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // Calculate words per minute (based on recent 5-minute window)
            const fiveMinutesAgo = currentTime - (5 * 60 * 1000);
            const recentWords = recentTranscripts
                .filter(t => t.timestamp > fiveMinutesAgo)
                .reduce((sum, t) => sum + t.wordCount, 0);
            const minutesElapsed = Math.min(5, sessionDuration / 60);
            const wpm = minutesElapsed > 0 ? Math.round(recentWords / minutesElapsed) : 0;
            wordsPerMinuteEl.textContent = wpm;
        }
        
        // Update analytics every second
        setInterval(updateAnalytics, 1000);
        
        if (transcriptDisplay && statusDisplay) {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}/transcript-ws`;
            console.log('🔌 Connecting to transcript WebSocket:', wsUrl);
            
            const ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                console.log('✅ Transcript WebSocket connected');
                statusDisplay.textContent = '🟢 Connected. Waiting for transcripts...';
                statusDisplay.className = 'status-connected';
                
                // Join the meeting room
                ws.send(JSON.stringify({
                    type: 'join-meeting',
                    meetingUuid: meetingUuid
                }));
                console.log('🏠 Joined meeting room:', meetingUuid);
            };
            
            ws.onmessage = (event) => {
                console.log('📨 WebSocket message received:', event.data);
                
                try {
                    const message = JSON.parse(event.data);
                    
                    if (message.type === 'joined') {
                        console.log('✅ Successfully joined meeting:', message.meetingUuid);
                        statusDisplay.textContent = `🟢 Connected to meeting: ${message.meetingUuid}`;
                    } else if (message.type === 'transcript' && message.data) {
                        console.log('🎯 RECEIVED TRANSCRIPT:', message.data);
                        
                        // Clear "no transcripts" message
                        const noTranscriptsMsg = transcriptDisplay.querySelector('.no-transcripts');
                        if (noTranscriptsMsg) {
                            noTranscriptsMsg.remove();
                        }
                        
                        const transcriptText = message.data.transcript || message.data.text || 'No text';
                        const speaker = message.data.speaker || 'Unknown Speaker';
                        const timestamp = new Date(message.data.timestamp || Date.now());
                        
                        // Update analytics
                        totalTranscripts++;
                        uniqueSpeakers.add(speaker);
                        const wordCount = transcriptText.split(/\s+/).filter(word => word.length > 0).length;
                        totalWords += wordCount;
                        
                        // Track recent transcripts for WPM calculation
                        recentTranscripts.push({
                            timestamp: Date.now(),
                            wordCount: wordCount
                        });
                        
                        // Clean old transcripts (keep only last hour)
                        const oneHourAgo = Date.now() - (60 * 60 * 1000);
                        recentTranscripts = recentTranscripts.filter(t => t.timestamp > oneHourAgo);
                        
                        // Determine speaker color/ID for styling
                        const speakerArray = Array.from(uniqueSpeakers);
                        const speakerIndex = speakerArray.indexOf(speaker);
                        const speakerId = `speaker-${(speakerIndex % 5) + 1}`;
                        
                        // Create enhanced transcript element
                        const transcriptDiv = document.createElement('div');
                        transcriptDiv.className = 'transcript-item';
                        transcriptDiv.setAttribute('data-speaker', speakerId);
                        transcriptDiv.innerHTML = `
                            <div class="transcript-header">
                                <div class="transcript-speaker">${speaker}</div>
                                <div class="transcript-time">${timestamp.toLocaleTimeString()}</div>
                            </div>
                            <div class="transcript-text">${transcriptText}</div>
                        `;
                        
                        // Add to transcript list (newest at top)
                        transcriptDisplay.insertBefore(transcriptDiv, transcriptDisplay.firstChild);
                        
                        // Update status
                        statusDisplay.textContent = `🟢 Last transcript: ${timestamp.toLocaleTimeString()}`;
                        
                        // Update analytics immediately
                        updateAnalytics();
                    }
                } catch (e) {
                    console.error('❌ Error parsing WebSocket message:', e);
                }
            };
            
            ws.onerror = (error) => {
                console.error('❌ Transcript WebSocket error:', error);
                statusDisplay.textContent = '🔴 Error connecting to transcript service';
                statusDisplay.className = 'status-error';
            };
            
            ws.onclose = () => {
                console.log('🔌 Transcript WebSocket closed');
                statusDisplay.textContent = '🟠 Disconnected from transcript service';
                statusDisplay.className = 'status-disconnected';
            };
        } else {
            console.error('❌ Transcript display elements not found!');
        }
        
        // Initialize analytics display
        updateAnalytics();
    if isZoom
        script(type="module" src='/js/bundle.mjs')
        script(nomodule src='/js/bundle.js')

