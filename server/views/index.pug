extends layout

block content
    .container
        h1=title
        
        // Welcome Section with improved styling
        .card.mb-4
            .card-body
                if isZoom
                    h3.text-center Welcome to your Zoom App! üéâ
                    p.text-center.text-muted Experience live transcript display with real-time analytics
                else
                    h3.text-center Browser Preview Mode
                    p.text-center 
                        | You're viewing your Zoom App through the browser.&nbsp;
                        a.btn.btn-primary(href=`/install`) Install in Zoom
                    .alert.alert-info
                        strong üß™ Testing Mode: 
                        | The transcript WebSocket connection will work in both Zoom and browser for testing.
        
        // Statistics Dashboard
        .card.mb-4
            .card-header
                h3.mb-0 üìä Meeting Analytics
            .card-body
                .transcript-stats
                    .stat-item
                        .stat-value#total-transcripts 0
                        .stat-label Total Messages
                    .stat-item
                        .stat-value#active-speakers 0
                        .stat-label Active Speakers
                    .stat-item
                        .stat-value#session-duration --:--
                        .stat-label Session Time
                    .stat-item
                        .stat-value#words-per-minute 0
                        .stat-label Words/Min
                        
        // Enhanced Transcript Container
        #transcript-container.card
            .transcript-header
                h2 üé§ Live Transcripts
            #transcript-status.status-disconnected Connecting to transcript stream...
            #transcript-list.transcript-list
                p.no-transcripts No transcripts yet. Start speaking in the meeting to see live transcripts here.
        
        // Alert styling for browser mode
        .alert {
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-lg);
            border-radius: var(--border-radius-md);
            border: 1px solid transparent;
        }
        
        .alert-info {
            background: linear-gradient(135deg, #d1ecf1, #bee5eb);
            color: var(--info-color);
            border-color: var(--info-color);
        }

append scripts
    // Load native WebSocket transcript connection (following ActionExtractor pattern)
    script.
        console.log('üîß Loading WebSocket transcript connection...');
        
        // Get meeting UUID from URL or use default for testing
        const urlParams = new URLSearchParams(window.location.search);
        const meetingUuid = urlParams.get('meetingUuid') || 'S/N3ZB7NQj+1oNKkv+t5zA==';
        
        // WebSocket connection (following ActionExtractor pattern)
        const transcriptDisplay = document.getElementById('transcript-list');
        const statusDisplay = document.getElementById('transcript-status');
        
        if (transcriptDisplay && statusDisplay) {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}/transcript-ws`;
            console.log('üîå Connecting to transcript WebSocket:', wsUrl);
            
            const ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                console.log('‚úÖ Transcript WebSocket connected');
                statusDisplay.textContent = 'Connected. Waiting for transcripts...';
                statusDisplay.className = 'status-connected';
                
                // Join the meeting room
                ws.send(JSON.stringify({
                    type: 'join-meeting',
                    meetingUuid: meetingUuid
                }));
                console.log('üè† Joined meeting room:', meetingUuid);
            };
            
            ws.onmessage = (event) => {
                console.log('üì® WebSocket message received:', event.data);
                
                try {
                    const message = JSON.parse(event.data);
                    
                    if (message.type === 'joined') {
                        console.log('‚úÖ Successfully joined meeting:', message.meetingUuid);
                        statusDisplay.textContent = `Connected to meeting: ${message.meetingUuid}`;
                    } else if (message.type === 'transcript' && message.data) {
                        console.log('üéØ RECEIVED TRANSCRIPT:', message.data);
                        
                        // Clear "no transcripts" message
                        const noTranscriptsMsg = transcriptDisplay.querySelector('.no-transcripts');
                        if (noTranscriptsMsg) {
                            noTranscriptsMsg.remove();
                        }
                        
                        // Create transcript element
                        const transcriptDiv = document.createElement('div');
                        transcriptDiv.className = 'transcript-item';
                        transcriptDiv.innerHTML = `
                            <div class="transcript-speaker">${message.data.speaker || 'Unknown Speaker'}</div>
                            <div class="transcript-text">${message.data.transcript || message.data.text || 'No text'}</div>
                            <div class="transcript-time">${new Date(message.data.timestamp).toLocaleTimeString()}</div>
                        `;
                        
                        // Add to transcript list (newest at top)
                        transcriptDisplay.insertBefore(transcriptDiv, transcriptDisplay.firstChild);
                        
                        // Update status
                        statusDisplay.textContent = `Last transcript: ${new Date().toLocaleTimeString()}`;
                    }
                } catch (e) {
                    console.error('‚ùå Error parsing WebSocket message:', e);
                }
            };
            
            ws.onerror = (error) => {
                console.error('‚ùå Transcript WebSocket error:', error);
                statusDisplay.textContent = 'Error connecting to transcript service';
                statusDisplay.className = 'status-error';
            };
            
            ws.onclose = () => {
                console.log('üîå Transcript WebSocket closed');
                statusDisplay.textContent = 'Disconnected from transcript service';
                statusDisplay.className = 'status-disconnected';
            };
        } else {
            console.error('‚ùå Transcript display elements not found!');
        }
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîß DOM loaded, initializing Socket.IO...');
            if (typeof io !== 'undefined') {
                console.log('‚úÖ Socket.IO library loaded');
                const socket = io();
                
                socket.on('connect', () => {
                    console.log('üîó Socket.IO connected:', socket.id);
                    // Join the meeting room with the meeting UUID from server logs
                    const meetingUuid = 'S/N3ZB7NQj+1oNKkv+t5zA==';
                    socket.emit('join-meeting', meetingUuid);
                    console.log('üè† Joined meeting room:', meetingUuid);
                });
                
                socket.on('transcript', (data) => {
                    console.log('üéØ RECEIVED TRANSCRIPT:', data);
                    // Add transcript to UI
                    const transcriptList = document.getElementById('transcript-list');
                    const noTranscripts = transcriptList.querySelector('.no-transcripts');
                    if (noTranscripts) noTranscripts.remove();
                    
                    const transcriptDiv = document.createElement('div');
                    transcriptDiv.className = 'transcript-item';
                    transcriptDiv.innerHTML = `
                        <div class="transcript-header">
                            <span class="transcript-speaker">${data.speaker || 'Unknown'}</span>
                            <span class="transcript-time">${new Date().toLocaleTimeString()}</span>
                        </div>
                        <div class="transcript-text">${data.transcript || data.text || 'No text'}</div>
                    `;
                    transcriptList.insertBefore(transcriptDiv, transcriptList.firstChild);
                });
                
                socket.on('disconnect', () => {
                    console.log('üîå Socket.IO disconnected');
                });
                
                socket.on('connect_error', (error) => {
                    console.error('‚ùå Socket.IO connection error:', error);
                });
            } else {
                console.error('‚ùå Socket.IO library not loaded');
            }
        });
    if isZoom
        script(type="module" src='/js/bundle.mjs')
        script(nomodule src='/js/bundle.js')

