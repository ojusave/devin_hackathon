extends layout

block content
    h1=title
    if isZoom
        p Welcome to your Zoom App - Live Transcript Display
    else
        p You're viewing your Zoom App through the browser.&nbsp;
            a(href=`/install`) Click Here
            | &nbsp;to install your app in Zoom.
        p.testing-note 
            strong Testing Mode: 
            | The transcript WebSocket connection will work in both Zoom and browser for testing.
            
    // Always show transcript container for testing
    #transcript-container
        h2 Live Transcripts
        #transcript-status.status-disconnected Connecting to transcript stream...
        #transcript-list.transcript-list
            p.no-transcripts No transcripts yet. Start speaking in the meeting to see live transcripts here.
    
    style.
        #transcript-container {
            margin: 20px 0;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            background: #f9f9f9;
        }
        
        #transcript-status {
            padding: 8px 12px;
            border-radius: 4px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .status-connected {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status-disconnected {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        #transcript-list {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
            background: white;
            padding: 10px;
        }
        
        .transcript-item {
            border-bottom: 1px solid #eee;
            padding: 10px 0;
            margin-bottom: 10px;
        }
        
        .transcript-item:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }
        
        .transcript-speaker {
            font-weight: bold;
            color: #0066cc;
            margin-bottom: 4px;
        }
        
        .transcript-text {
            color: #333;
            line-height: 1.4;
            margin-bottom: 4px;
        }
        
        .transcript-time {
            font-size: 0.8em;
            color: #666;
            font-style: italic;
        }
        
        .no-transcripts {
            color: #666;
            font-style: italic;
            text-align: center;
            padding: 20px;
        }

append scripts
    // Load native WebSocket transcript connection (following ActionExtractor pattern)
    script.
        console.log('üîß Loading WebSocket transcript connection...');
        
        // Get meeting UUID from URL or use default for testing
        const urlParams = new URLSearchParams(window.location.search);
        const meetingUuid = urlParams.get('meetingUuid') || 'S/N3ZB7NQj+1oNKkv+t5zA==';
        
        // WebSocket connection (following ActionExtractor pattern)
        const transcriptDisplay = document.getElementById('transcript-list');
        const statusDisplay = document.getElementById('transcript-status');
        
        if (transcriptDisplay && statusDisplay) {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}/transcript-ws`;
            console.log('üîå Connecting to transcript WebSocket:', wsUrl);
            
            const ws = new WebSocket(wsUrl);
            
            ws.onopen = () => {
                console.log('‚úÖ Transcript WebSocket connected');
                statusDisplay.textContent = 'Connected. Waiting for transcripts...';
                statusDisplay.className = 'status-connected';
                
                // Join the meeting room
                ws.send(JSON.stringify({
                    type: 'join-meeting',
                    meetingUuid: meetingUuid
                }));
                console.log('üè† Joined meeting room:', meetingUuid);
            };
            
            ws.onmessage = (event) => {
                console.log('üì® WebSocket message received:', event.data);
                
                try {
                    const message = JSON.parse(event.data);
                    
                    if (message.type === 'joined') {
                        console.log('‚úÖ Successfully joined meeting:', message.meetingUuid);
                        statusDisplay.textContent = `Connected to meeting: ${message.meetingUuid}`;
                    } else if (message.type === 'transcript' && message.data) {
                        console.log('üéØ RECEIVED TRANSCRIPT:', message.data);
                        
                        // Clear "no transcripts" message
                        const noTranscriptsMsg = transcriptDisplay.querySelector('.no-transcripts');
                        if (noTranscriptsMsg) {
                            noTranscriptsMsg.remove();
                        }
                        
                        // Create transcript element
                        const transcriptDiv = document.createElement('div');
                        transcriptDiv.className = 'transcript-item';
                        transcriptDiv.innerHTML = `
                            <div class="transcript-speaker">${message.data.speaker || 'Unknown Speaker'}</div>
                            <div class="transcript-text">${message.data.transcript || message.data.text || 'No text'}</div>
                            <div class="transcript-time">${new Date(message.data.timestamp).toLocaleTimeString()}</div>
                        `;
                        
                        // Add to transcript list (newest at top)
                        transcriptDisplay.insertBefore(transcriptDiv, transcriptDisplay.firstChild);
                        
                        // Update status
                        statusDisplay.textContent = `Last transcript: ${new Date().toLocaleTimeString()}`;
                    }
                } catch (e) {
                    console.error('‚ùå Error parsing WebSocket message:', e);
                }
            };
            
            ws.onerror = (error) => {
                console.error('‚ùå Transcript WebSocket error:', error);
                statusDisplay.textContent = 'Error connecting to transcript service';
                statusDisplay.className = 'status-error';
            };
            
            ws.onclose = () => {
                console.log('üîå Transcript WebSocket closed');
                statusDisplay.textContent = 'Disconnected from transcript service';
                statusDisplay.className = 'status-disconnected';
            };
        } else {
            console.error('‚ùå Transcript display elements not found!');
        }
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîß DOM loaded, initializing Socket.IO...');
            if (typeof io !== 'undefined') {
                console.log('‚úÖ Socket.IO library loaded');
                const socket = io();
                
                socket.on('connect', () => {
                    console.log('üîó Socket.IO connected:', socket.id);
                    // Join the meeting room with the meeting UUID from server logs
                    const meetingUuid = 'S/N3ZB7NQj+1oNKkv+t5zA==';
                    socket.emit('join-meeting', meetingUuid);
                    console.log('üè† Joined meeting room:', meetingUuid);
                });
                
                socket.on('transcript', (data) => {
                    console.log('üéØ RECEIVED TRANSCRIPT:', data);
                    // Add transcript to UI
                    const transcriptList = document.getElementById('transcript-list');
                    const noTranscripts = transcriptList.querySelector('.no-transcripts');
                    if (noTranscripts) noTranscripts.remove();
                    
                    const transcriptDiv = document.createElement('div');
                    transcriptDiv.className = 'transcript-item';
                    transcriptDiv.innerHTML = `
                        <div class="transcript-header">
                            <span class="transcript-speaker">${data.speaker || 'Unknown'}</span>
                            <span class="transcript-time">${new Date().toLocaleTimeString()}</span>
                        </div>
                        <div class="transcript-text">${data.transcript || data.text || 'No text'}</div>
                    `;
                    transcriptList.insertBefore(transcriptDiv, transcriptList.firstChild);
                });
                
                socket.on('disconnect', () => {
                    console.log('üîå Socket.IO disconnected');
                });
                
                socket.on('connect_error', (error) => {
                    console.error('‚ùå Socket.IO connection error:', error);
                });
            } else {
                console.error('‚ùå Socket.IO library not loaded');
            }
        });
    if isZoom
        script(type="module" src='/js/bundle.mjs')
        script(nomodule src='/js/bundle.js')

